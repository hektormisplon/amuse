import bodyParser from 'body-parser';
import chalk from 'chalk';
import cors from 'cors';
import express from 'express';
import http from 'http';
import mongoose from 'mongoose';
import morgan from 'morgan';
import passport from 'passport';
import path from 'path';
import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';
/*
Import internal libraries
- apiV1Router
- logger
- Seeder
*/
import { Seeder } from './api/v1/database';
import apiV1Router from './api/v1/routes';
import config from './config';
import { logger } from './utilities';

// configure mongoose
const mongoDbConnectionString = config.mongoDbConnectionstring;
mongoose.connect(mongoDbConnectionString, {
    useNewUrlParser: true,
    useCreateIndex: true,
});

// connect to database
const db = mongoose.connection;
db.on('error', () => {
    logger.log({ level: 'error', message: 'MongoDb connection error' });
});
db.on('connected', () => {
    logger.log({ level: 'info', message: 'MongoDb connected' });
});

// Morgan middleware
const morganMiddleware = morgan((tokens, req, res) => {
    [
        '\n',
        chalk.hex('#ff4757').bold('🍄  Morgan --> '),
        chalk.hex('#34ace0').bold(tokens.method(req, res)),
        chalk.hex('#ffb142').bold(tokens.status(req, res)),
        chalk.hex('#ff5252').bold(tokens.url(req, res)),
        chalk.hex('#2ed573').bold(`${tokens['response-time'](req, res)}  ms`),
        chalk.hex('#f78fb3').bold(`@ ${tokens.date(req, res)}`),
        chalk.yellow(tokens['remote-addr'](req, res)),
        chalk.hex('#fffa65').bold(`from ${tokens.referrer(req, res)}`),
        chalk.hex('#1e90ff')(tokens['user-agent'](req, res)),
        '',
    ].join(' ');
});

// create express app (w/ morgan middleware in dev)
const app = express();
if (config.nodeEnvironment === 'Development') {
    app.use(morganMiddleware);
}
// cors config
const corsOption = {
    origin: true,
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
    exposedHeaders: ['x-auth-token'],
};
app.use(cors(corsOption));

// file upload config
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));
app.use(bodyParser.json({ limit: '50mb', keepExtensions: true }));

// view engine config
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

if (config.nodeEnvironment === 'Production') {
    app.use(express.static(path.join(__dirname, 'client')));
} else {
    app.use(express.static(path.join(__dirname, '/../client/build')));
}

// passport middleware
app.use(passport.initialize());

// serving static files
app.use('/static', express.static(path.join(__dirname, 'assets')));

// documentation setup
const swaggerOptions = {
    swaggerDefinition: {
        info: {
            title: 'aMuse API',
            version: '1.0.0',
            description: 'The autogenerated API documentation',
        },
    },
    apis: [path.join(__dirname, './api/v1/routes/*.js')],
};
const swaggerSpecs = swaggerJsdoc(swaggerOptions);
app.use('/api/v1/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpecs));
app.get('/swagger.json', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.send(swaggerSpecs);
});
app.get('/docs', (req, res) => {
    res.render('redoc', {});
});

// load api router
app.use('/api/v1', apiV1Router);

// production setup
app.get('*', (req, res) => {
    if (config.nodeEnvironment === 'Production') {
        res.sendFile(path.join(__dirname, './client/index.html'));
    } else {
        res.sendFile(path.join(__dirname, '/../client/build/index.html'));
    }
});

// error handler setup
app.use((error, req, res, next) => {
    res.status(error.status || 500);
    const obj = {
        error: {
            message: error.message,
            status: error.status,
            timestamp: new Date().getTime(),
        },
    };
    logger.log({ level: 'error', message: `${obj.error.message}` });
    if (req.xhr) {
        res.json(obj);
    } else if (!req.xhr && error.status === 404) {
        res.render('404', obj);
    } else {
        res.render('error', obj);
    }
    return next();
});

// TODO: https
// const httpsOptions = {
//     key: fs.readFileSync('./security/cert.key'),
//     cert: fs.readFileSync('./security/cert.pem')
// }
// const httpsServer = https.Server(httpsOptions ,app);
// httpsServer.listen(config.nodePort, config.nodeHostname, () => {
//     logger.log({level: 'info', message: `Server running at https://${config.nodeHostname}:${config.nodePort}`});
// });

// create server
const httpServer = http.Server(app);
httpServer.listen(config.nodePort, config.address, () => {
    logger.log({ level: 'info', message: `Serving http://${config.address}:${config.nodePort}/` });
});

// seeder setup
if (config.nodeEnvironment === 'Development') {
    const seeder = new Seeder();
    seeder.seed();
}

export default app;
